% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classification_models.R
\name{elnet_hypopt}
\alias{elnet_hypopt}
\title{Hyperparameter optimization for elastic net}
\usage{
elnet_hypopt(
  train_data,
  test_data,
  disease,
  type = "lasso",
  metric = roc_auc,
  cv_sets = 5,
  grid_size = 10,
  ncores = 4,
  hypopt_vis = TRUE,
  exclude_cols = NULL,
  seed = 123
)
}
\arguments{
\item{train_data}{(list). List of training data sets from make_groups().}

\item{test_data}{(list). List of testing data sets from make_groups().}

\item{disease}{(character). Disease to predict.}

\item{type}{(character). Type of regularization. Default is "lasso". Other options are "ridge" and "elnet".}

\item{metric}{(function). Metric to optimize. Default is roc_auc.}

\item{cv_sets}{(numeric). Number of cross-validation sets. Default is 5.}

\item{grid_size}{(numeric). Size of the grid for hyperparameter optimization. Default is 10.}

\item{ncores}{(numeric). Number of cores to use for parallel processing. Default is 4.}

\item{hypopt_vis}{(logical). Whether to visualize hyperparameter optimization results. Default is TRUE.}

\item{exclude_cols}{(vector). Columns to exclude from the model. Default is NULL.}

\item{seed}{(numeric). Seed for reproducibility. Default is 123.}
}
\value{
A list with three elements:
\itemize{
\item elnet_tune (tibble). Hyperparameter optimization results.
\item wf (workflow). Workflow object.
\item train_set (tibble). Training set.
\item test_set (tibble). Testing set.
}
}
\description{
This function performs hyperparameter optimization for elastic net models.
It uses the glmnet engine for logistic regression and tunes either only penalty or both penalty and mixture.
}
\examples{
wide_data <- example_data |>
  dplyr::select(DAid, Assay, NPX) |>
  tidyr::pivot_wider(names_from = Assay, values_from = NPX)
join_data <- wide_data |>
  dplyr::left_join(example_metadata |> dplyr::select(DAid, Disease, Sex))
diseases <- unique(example_metadata$Disease)
data_split <- split_data(join_data)
train_list <- make_groups(data_split$train_set,
                          diseases,
                          only_female = c("BRC", "CVX", "ENDC", "OVC"),
                          only_male = "PRC")

test_list <- make_groups(data_split$test_set,
                         diseases,
                         only_female = c("BRC", "CVX", "ENDC", "OVC"),
                         only_male = "PRC")

hypopt_res <- elnet_hypopt(train_list,
                           test_list,
                           "AML",
                           type = "elnet",
                           cv_sets = 2,
                           grid_size = 1,
                           ncores = 1,
                           exclude_cols = "Sex")
}
