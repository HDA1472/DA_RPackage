% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/classification_models.R
\name{plot_var_imp}
\alias{plot_var_imp}
\title{Plot variable importance}
\usage{
plot_var_imp(
  finalfit_res,
  disease,
  accuracy,
  sensitivity,
  specificity,
  auc,
  mixture,
  subtitle = c("accuracy", "sensitivity", "specificity", "auc", "features",
    "top-features", "mixture")
)
}
\arguments{
\item{finalfit_res}{(list). Results from elnet_finalfit().}

\item{disease}{(character). Disease to predict.}

\item{accuracy}{(numeric). Accuracy of the model.}

\item{sensitivity}{(numeric). Sensitivity of the model.}

\item{specificity}{(numeric). Specificity of the model.}

\item{auc}{(numeric). AUC of the model.}

\item{mixture}{(numeric). Mixture of lasso and ridge regularization.}

\item{subtitle}{(vector). Vector of subtitles to include in the plot. Default is a list with all.}
}
\value{
A list with two elements:
\itemize{
\item features (tibble). Features with importance values.
\item var_imp_plot (plot). Variable importance plot.
}
}
\description{
This function collects the features and their importance.
It scales their importance and plots it against them.
}
\examples{
wide_data <- example_data |>
  dplyr::select(DAid, Assay, NPX) |>
  tidyr::pivot_wider(names_from = Assay, values_from = NPX)
join_data <- wide_data |>
  dplyr::left_join(example_metadata |> dplyr::select(DAid, Disease, Sex))
diseases <- unique(example_metadata$Disease)
data_split <- split_data(join_data)
train_list <- make_groups(data_split$train_set,
                          diseases,
                          only_female = c("BRC", "CVX", "ENDC", "OVC"),
                          only_male = "PRC")

test_list <- make_groups(data_split$test_set,
                         diseases,
                         only_female = c("BRC", "CVX", "ENDC", "OVC"),
                         only_male = "PRC")

hypopt_res <- elnet_hypopt(train_list,
                           test_list,
                           "AML",
                           type = "elnet",
                           cv_sets = 2,
                           grid_size = 1,
                           ncores = 1,
                           exclude_cols = "Sex")

finalfit_res <- elnet_finalfit(hypopt_res$train_set, hypopt_res$elnet_tune, hypopt_res$wf)

testfit_res <- elnet_testfit(hypopt_res$train_set,
                             hypopt_res$test_set,
                             "AML",
                             finalfit_res,
                             exclude_cols = "Sex")

plot_var_imp(finalfit_res,
             "AML",
             testfit_res$metrics$accuracy,
             testfit_res$metrics$sensitivity,
             testfit_res$metrics$specificity,
             testfit_res$metrics$auc,
             testfit_res$mixture)
}
